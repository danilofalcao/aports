From 388c7b51716cdb6221ec292cc2456ceca6ee9b02 Mon Sep 17 00:00:00 2001
From: Rob Peters <ROb@DVBControl.com>
Date: Wed, 24 Jan 2018 12:03:24 +0100
Subject: [PATCH] Make compatible with boost 1.66

---
 msbuild/domoticz.vcxproj  | 2 +-
 webserver/proxyclient.cpp | 2 +-
 webserver/server.cpp      | 4 ++--
 3 files changed, 4 insertions(+), 4 deletions(-)

diff --git a/msbuild/domoticz.vcxproj b/msbuild/domoticz.vcxproj
index 5c526ed72..cee958414 100755
--- a/msbuild/domoticz.vcxproj
+++ b/msbuild/domoticz.vcxproj
@@ -58,7 +58,7 @@
       <PrecompiledHeader>Use</PrecompiledHeader>
       <WarningLevel>Level3</WarningLevel>
       <Optimization>Disabled</Optimization>
-      <PreprocessorDefinitions>WIN32;ENABLE_PYTHON;_DEBUG;PTW32_STATIC_LIB;WITH_OPENZWAVE;OPENZWAVE_USEDLL;WWW_ENABLE_SSL;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>
+      <PreprocessorDefinitions>WIN32;ENABLE_PYTHON;_DEBUG;PTW32_STATIC_LIB;WITH_OPENZWAVE;OPENZWAVE_USEDLL;WWW_ENABLE_SSL;_CONSOLE;BOOST_CONFIG_SUPPRESS_OUTDATED_MESSAGE;%(PreprocessorDefinitions)</PreprocessorDefinitions>
       <AdditionalIncludeDirectories>./Windows Libraries/Boost;./libusb;../MQTT;..\hardware\openzwave;./Windows Libraries/openssl;./Windows Libraries/Curl;./Windows Libraries/pthread;../hardware/plugins/Include;../tinyxpath;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
       <RuntimeLibrary>MultiThreadedDebugDLL</RuntimeLibrary>
       <EnablePREfast>false</EnablePREfast>
diff --git a/webserver/proxyclient.cpp b/webserver/proxyclient.cpp
index 6bd6b8771..86baef222 100644
--- a/webserver/proxyclient.cpp
+++ b/webserver/proxyclient.cpp
@@ -771,7 +771,7 @@ namespace http {
 		{
 			try {
 				//boost::asio::ssl::context ctx(io_service, boost::asio::ssl::context::tlsv12_client);
-				boost::asio::ssl::context ctx(io_service, boost::asio::ssl::context::sslv23);
+				boost::asio::ssl::context ctx(boost::asio::ssl::context::sslv23);
 				ctx.set_verify_mode(boost::asio::ssl::verify_none);
 
 				proxyclient.reset(new CProxyClient(io_service, ctx, m_pWebEm));
diff --git a/webserver/server.cpp b/webserver/server.cpp
index fe001e811..c0eec2166 100644
--- a/webserver/server.cpp
+++ b/webserver/server.cpp
@@ -152,7 +152,7 @@ void server::handle_accept(const boost::system::error_code& e) {
 ssl_server::ssl_server(const ssl_server_settings & ssl_settings, request_handler & user_request_handler) :
 		server_base(ssl_settings, user_request_handler),
 		settings_(ssl_settings),
-		context_(io_service_, ssl_settings.get_ssl_method())
+		context_(ssl_settings.get_ssl_method())
 {
 #ifdef DEBUG_WWW
 	_log.Log(LOG_STATUS, "[web:%s] create ssl_server using ssl_server_settings : %s", ssl_settings.listening_port.c_str(), ssl_settings.to_string().c_str());
@@ -165,7 +165,7 @@ ssl_server::ssl_server(const ssl_server_settings & ssl_settings, request_handler
 ssl_server::ssl_server(const server_settings & settings, request_handler & user_request_handler) :
 		server_base(settings, user_request_handler),
 		settings_(dynamic_cast<ssl_server_settings const &>(settings)),
-		context_(io_service_, dynamic_cast<ssl_server_settings const &>(settings).get_ssl_method()) {
+		context_(dynamic_cast<ssl_server_settings const &>(settings).get_ssl_method()) {
 #ifdef DEBUG_WWW
 	_log.Log(LOG_STATUS, "[web:%s] create ssl_server using server_settings : %s", settings.listening_port.c_str(), settings.to_string().c_str());
 #endif
